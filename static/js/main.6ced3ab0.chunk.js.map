{"version":3,"sources":["Videos.js","App.js","serviceWorker.js","index.js"],"names":["Videos","Card","style","margin","CardContent","Typography","color","gutterBottom","this","props","dict","className","position","padding","paddingTop","width","height","src","url","frameBorder","allow","allowFullScreen","Component","_","require","getSuggestionValue","suggestion","word","renderSuggestion","getSectionSuggestions","section","words","App","state","suggestions","videos","value","dicts","groupedWords","selected","getSuggestions","escapedValue","trim","replace","regex","RegExp","length","groupBy","car","setState","filtered","Object","keys","filter","key","test","reduce","obj","map","onChange","event","newValue","method","onSuggestionsFetchRequested","onSuggestionsClearRequested","onSuggestionSelected","axios","get","then","response","data","dictionaries","forEach","file","resp","push","title","split","wordInfo","variants","inputProps","placeholder","renderVideos","v","start","video","end","endsWith","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6ced3ab0.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Card from \"@material-ui/core/Card\";\n\nclass Videos extends Component {\n    render() {\n\n        return (\n            <Card style={{margin: \"20px 0\"}}>\n                <CardContent>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                        Источник видео: {this.props.dict}\n                    </Typography>\n\n                </CardContent>\n                <div\n                    className=\"video\"\n                    style={{\n                        position: \"relative\",\n                        padding: 25,\n                        paddingTop: 0,\n                    }}\n                >\n                    <iframe width=\"560\" height=\"315\"\n                            src={this.props.url}\n                            frameBorder=\"0\"\n                            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                            allowFullScreen>\n                    </iframe>\n                </div>\n            </Card>\n\n        );\n    }\n}\n\nexport default Videos;","import React, {Component} from 'react';\nimport Videos from './Videos';\nimport axios from 'axios';\n\nimport Autosuggest from 'react-autosuggest';\n\nlet _ = require('lodash');\n\nfunction escapeRegexCharacters(str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction getSuggestionValue(suggestion) {\n    return suggestion.word;\n}\n\nfunction renderSuggestion(suggestion) {\n    return (\n        <span>{suggestion.word}</span>\n    );\n}\n\nfunction getSectionSuggestions(section) {\n    return section.words;\n}\n\n\nclass App extends Component {\n    state = {\n        suggestions: [],\n        videos: null,\n        value: '',\n        dicts: [],\n        words: [],\n        groupedWords: [],\n        selected: false,\n    };\n\n    componentDidMount() {\n        var dicts = [];\n        var words = [];\n\n        axios.get('manifest.json')\n            .then((response) => {\n                const dict_names = response.data.dictionaries;\n                dict_names.forEach(file => {\n                    axios.get(`/dictionaries/${file}`)\n                        .then(resp => {\n                            dicts.push({title: `${file}`.split('.json')[0], words: resp.data});\n                            resp.data.forEach(wordInfo => {\n                                words.push({\n                                    title: `${file}`.split('.json')[0],\n                                    word: wordInfo.word, variants: wordInfo.variants\n                                })\n                            });\n                        })\n                })\n            });\n\n        this.setState({\n            dicts: dicts,\n            words: words,\n        });\n    }\n\n    getSuggestions = (value) => {\n        const escapedValue = escapeRegexCharacters(value.trim());\n\n        if (escapedValue === '') {\n            return [];\n        }\n\n        const regex = new RegExp('^' + escapedValue, 'i');\n\n        let groupedWords;\n        if (!this.state.groupedWords.length) {\n            groupedWords = _.groupBy(this.state.words, car => car.word);\n            this.setState({groupedWords: groupedWords});\n        }\n        else groupedWords = this.state.groupedWords;\n\n        const filtered = Object.keys(groupedWords)\n            .filter(key => regex.test(key))\n            .reduce((obj, key) => {\n                obj[key] = groupedWords[key];\n                return obj;\n            }, {});\n\n        return Object.keys(filtered).map(key => {\n            return {word: key}\n        });\n    };\n\n    onChange = (event, {newValue, method}) => {\n        this.setState({\n            value: newValue,\n        });\n    };\n\n    onSuggestionsFetchRequested = ({value}) => {\n        this.setState({\n            suggestions: this.getSuggestions(value),\n            selected: false,\n        });\n    };\n\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: [],\n        });\n    };\n\n    onSuggestionSelected = (event, {suggestion}) => {\n        this.setState({\n            selected: true,\n        });\n    };\n\n    get renderVideos() {\n        let wordInfo = [];\n        let videos = [];\n\n        if (this.state.selected && this.state.value.length > 0) {\n            this.state.groupedWords[this.state.value].forEach(dict => {\n                wordInfo.push({variants: dict.variants, dict: dict.title})\n            });\n\n            if (wordInfo) {\n                for (let v of wordInfo) {\n                    let url;\n                    if (v.variants[0].start)\n                        url = `https://www.youtube.com/embed/${v.variants[0].video.split('v=')[1]}?start=${v.variants[0].start}&end=${v.variants[0].end}&rel=0&loop=1&controls=0&showinfo=0`;\n                    else if (!v.variants[0].video.endsWith(\".mp4\")) url = `https://www.youtube.com/embed/${v.variants[0].video.split('v=')[1]}`;\n                    else url = v.variants[0].video;\n\n                    videos.push(<Videos url={url} dict={v.dict}/>);\n                }\n            }\n        }\n\n        return videos;\n    };\n\n    render() {\n        const inputProps = {\n            placeholder: \"Введите слово\",\n            value: this.state.value,\n            onChange: this.onChange\n        };\n\n        return (\n            <div>\n                <div style={{paddingTop: \"80px\", margin: \"auto\", width: \"25%\"}}>\n                    <Autosuggest\n                        suggestions={this.state.suggestions}\n                        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                        getSuggestionValue={getSuggestionValue}\n                        renderSuggestion={renderSuggestion}\n                        onSuggestionSelected={this.onSuggestionSelected}\n                        getSectionSuggestions={getSectionSuggestions}\n                        inputProps={inputProps}/>\n                </div>\n                <div className=\"videos-grid\">\n                    {this.renderVideos}\n                </div>\n\n            </div>\n        );\n\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}